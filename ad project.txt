
Sort the given Linked List using quicksort. which takes O(n^2) time in worst case and O(nLogn) in average and best cases, otherwise you may get TLE.

Input:
In this problem, method takes 1 argument: address of the head of the linked list. The function should not read any input from stdin/console.
The struct Node has a data part which stores the data and a next pointer which points to the next element of the linked list.
There are multiple test cases. For each test case, this method will be called individually.

Output:
Set *headRef to head of resultant linked list.

User Task:
The task is to complete the function quickSort() which should set the *headRef to head of the resultant linked list.

Constraints:
1<=T<=100
1<=N<=200

Note: If you use "Test" or "Expected Output Button" use below example format

Example:
Input:
2
3
1 6 2
4
1 9 3 8

Output:
1 2 6
1 3 8 9

Explanation:
Testcase 1: After sorting the nodes, we have 1, 2 and 6.
Testcase 2: After sorting the nodes, we have 1, 3, 8 and 9import java.util.*;
import java.lang.*;






class Node 
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}

class SortLL
{
    static Node head;
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0) 
        {
            int n = sc.nextInt();
            int a1 = sc.nextInt();
            Node head = new Node(a1);
            addToTheLast(head);
            
            for(int i = 1; i< n; i++)
            {
                int a = sc.nextInt();
                addToTheLast(new Node(a));
            }
            
            GfG gfg = new GfG();
            Node node = gfg.quickSort(head);
            
            printList(node);
            System.out.println();
        }
    }
    public static void printList(Node head)
    {
        while(head != null)
        {
            System.out.print(head.data + " ");
            head = head.next;
        }
    }
    
    public static void addToTheLast(Node node) 
{
  if (head == null) 
  {
    head = node;
  } else 
  {
   Node temp = head;
   while (temp.next != null)
          temp = temp.next;
         temp.next = node;
  }
}
}// } Driver Code Ends


/*node class of the linked list
class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
    
}*/
// you have to complete this function
class GfG
{
    public static Node quickSort(Node node)
    {
        //Your code here
        return quickHelper(node)[0];
    }
    public static Node[] segregate(Node head,int pivotIdx)
    {
        Node pivot = head;
        for(int  i = 0;i<pivotIdx;i++)
        {
            pivot = pivot.next;
        }
        Node curr = head;
        
        Node left = new Node(-1);
        Node right = new Node(-1);
        
        Node pleft = left;
        Node pright = right;
        
        while(curr!=null)
        {
            if(curr!= pivot)
            {
                if(curr.data<= pivot.data)
                {
                    pleft.next = curr;
                    pleft = pleft.next;
                }
                else
                {
                    pright.next = curr;
                    pright = pright.next;
                }
            }
            curr = curr.next;
        }
        pleft.next = null;
        pright.next = null;
        pivot.next = null;
        return new Node[]{
            left.next,
            pivot,
            right.next,
        };
        
    }
    public static Node[] quickHelper(Node head)
    {
        if(head == null||head.next == null)
        {
            return new Node[]{head,head};
        }
        int len  = length(head);
        int pivotIdx = len/2;
        
        Node [] information = segregate(head,pivotIdx);
        
        Node [] leftSorted = quickHelper(information[0]);
        Node [] rightSorted = quickHelper(information[2]);
        
        return merge(leftSorted,information[1],rightSorted);
    }
    public static Node[] merge(Node[] left,
                                Node pivot,
                                Node [] right)
    {
        Node head = null,tail = null;
        if(left[0]!=null&&right[0]!= null)
        {
            left[1].next = pivot;
            pivot.next = right[0];
            head = left[0];
            tail = right[1];
        }
        else if(left[0]!=null)
        {
            left[1].next = pivot;
            head = left[0];
            tail = pivot;
        }
        else if(right[0] != null )
        {
            pivot.next = right[0];
            head = pivot;
            tail = right[1];
        }
        else
        {
            head = tail = pivot;
        }
        return new Node[]{head,tail};
        
    }
    public static int length(Node node)
    {
        if(node == null )return 0;
        int len = 0;
        Node curr= node;
        while(curr!=null)
        {
            curr = curr.next;
            len++;
        }
        return len;
    }

    
    
}




Given a singly linked list. The task is to find the length of the linked list, where length is defined as the number of nodes in the linked list.

Example 1:

Input:
LinkedList: 1->2->3->4->5
Output: 5
Explanation: Count of nodes in the 
linked list is 5, which is its length.
Example 2:

Input:
LinkedList: 2->4->6->7->5->1->0
Output: 7
Explanation: Count of nodes in the
linked list is 7. Hence, the output
is 7.
Your Task:
Your task is to complete the given function getCount(), which takes a head reference as an argument and should return the length of the linked list.

Expected Time Complexity : O(N)
Expected Auxilliary Space : O(1)

Constraints:
1 <= N <= 105
1 <= value <= 103















import java.util.*;
class Node{
    int data;
    Node next;
    
    Node(int a){
        data = a;
        next = null;
    }
    
}

 // } Driver Code Ends
/*Complete the function below*/
/*
class Node{
    int data;
    Node next;
    Node(int a){  data = a; next = null; }
}*/

class Solution
{
    //Function to count nodes of a linked list.
    public static int getCount(Node head)
    {
        int ans = 0;
        return rec(head, ans);
    }
    
    public static int rec(Node t, int ans) {
        if(t == null) return ans;
        ans++;
        t = t.next;
        return rec(t, ans);
    }
}
    

// { Driver Code Starts.
class LinkedList{
    
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        while(t-->0)
        {
            int n=sc.nextInt();
            Node head = new Node(sc.nextInt());
            Node tail = head;
            for(int i=0; i<n-1; i++)
            {
                tail.next = new Node(sc.nextInt());
                tail = tail.next;
            }
            
            Solution ob = new Solution();
            System.out.println(ob.getCount(head));
        }
    }
   
    
    
    
}

  // } Driver Code Ends